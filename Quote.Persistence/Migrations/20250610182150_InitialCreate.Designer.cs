// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quote.Persistence;

#nullable disable

namespace Quote.Persistence.Migrations
{
    [DbContext(typeof(QuoteContext))]
    [Migration("20250610182150_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quote.Domain.Entities.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("Quote.Domain.Entities.Quote", b =>
                {
                    b.OwnsOne("Quote.Domain.ValueObjects.Author", "Author", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("author");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quote");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsOne("Quote.Domain.ValueObjects.Category", "Category", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("category");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quote");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.OwnsOne("Quote.Domain.ValueObjects.Textt", "Textt", b1 =>
                        {
                            b1.Property<Guid>("QuoteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("quote_text");

                            b1.HasKey("QuoteId");

                            b1.ToTable("Quote");

                            b1.WithOwner()
                                .HasForeignKey("QuoteId");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Category")
                        .IsRequired();

                    b.Navigation("Textt")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
